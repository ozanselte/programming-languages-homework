(defun term-cdr (lst)
    (case (car lst)
        ('PROGRAM (setf lst (tkn-cdr lst)))
        ('VALUES (setf lst (tkn-cdr lst)))
        ('EXPI (setf lst (tkn-cdr lst)))
        ('EXPI (setf lst (tkn-cdr lst)))
        ('EXPB (setf lst (tkn-cdr lst)))
        ('EXPLI (setf lst (tkn-cdr lst)))
    )
    lst
)

(defun tkn-cdr (lst)
    (case (car lst)
        ('STRING (setf lst (cdr lst)))
        ('VALUE (setf lst (cdr lst)))
        ('IDENTIFIER (setf lst (cdr lst)))
        ('VALUES (setf lst (cdr lst)))
        ('EXPI (setf lst (cdr lst)))
        ('EXPB (setf lst (cdr lst)))
        ('EXPLI (setf lst (cdr lst)))
    )
    (cdr lst)
)

(defun list-eq (a b)
    (when (and (null a) (null b))
        (return-from list-eq T)
    )
    (when (null a)
        (return-from list-eq NIL)
    )
    (when (null b)
        (return-from list-eq NIL)
    )
    (when (not (equal (car a) (car b)))
        (return-from list-eq NIL)
    )
    (list-eq (tkn-cdr a) (cdr b))
)

(defun str-check (str)
    (setf len (length str))
    (when (< len 1)
        (return-from str-check NIL)
    )
    (setf f (subseq str 0 1))
    T
)

(defun rule-1 (tokens vars)
    (when (list-eq
    (subseq tokens 0 2)
    (list 'EXPI))
        (print "Result:")
        (write (nth 1 tokens))
        (if (= 2 (list-length tokens))
            (return-from rule-1 (list (list 'PROGRAM) vars))
            (return-from rule-1 (list (append (list 'PROGRAM) (nthcdr 2 tokens)) vars))
        )
    )
    (setf tmp (rule-1 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-2 (tokens vars)
    (when (list-eq
    (subseq tokens 0 2)
    ;(list 'PROGRAM 'EXPI))
    (list 'EXPI))
        (print "Result:")
        (write (nth 2 tokens))
        (if (= 3 (list-length tokens))
            (return-from rule-2 (list (list 'PROGRAM) vars))
            (return-from rule-2 (list (append (list 'PROGRAM) (nthcdr 2 tokens)) vars))
        )
    )
    (setf tmp (rule-2 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-3 (tokens vars)
    (when (list-eq
    (subseq tokens 0 2)
    (list 'EXPB))
        (print "Result:")
        (write (nth 1 tokens))
        (if (= 2 (list-length tokens))
            (return-from rule-3 (list (list 'PROGRAM) vars))
            (return-from rule-3 (list (append (list 'PROGRAM) (nthcdr 2 tokens)) vars))
        )
    )
    (setf tmp (rule-3 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-4 (tokens vars)
    (when (list-eq
    (subseq tokens 0 2)
    ;(list 'PROGRAM 'EXPB))
    (list 'EXPB))
        (print "Result:")
        (write (nth 2 tokens))
        (if (= 3 (list-length tokens))
            (return-from rule-4 (list (list 'PROGRAM) vars))
            (return-from rule-4 (list (append (list 'PROGRAM) (nthcdr 2 tokens)) vars))
        )
    )
    (setf tmp (rule-4 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-5 (tokens vars)
    (when (list-eq
    (subseq tokens 0 2)
    (list 'EXPLI))
        (print "Result:")
        (write (nth 1 tokens))
        (if (= 2 (list-length tokens))
            (return-from rule-5 (list (list 'PROGRAM) vars))
            (return-from rule-5 (list (append (list 'PROGRAM) (nthcdr 2 tokens)) vars))
        )
    )
    (setf tmp (rule-5 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-6 (tokens vars)
    (when (list-eq
    (subseq tokens 0 2)
    ;(list 'PROGRAM 'EXPLI))
    (list 'EXPLI))
        (print "Result:")
        (write (nth 2 tokens))
        (if (= 3 (list-length tokens))
            (return-from rule-6 (list (list 'PROGRAM) vars))
            (return-from rule-6 (list (append (list 'PROGRAM) (nthcdr 2 tokens)) vars))
        )
    )
    (setf tmp (rule-6 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-7 (tokens vars)
    (when (list-eq
    (subseq tokens 0 3)
    (list 'OP_OP 'KW_EXIT 'OP_CP))
        (bye)
    )
    (setf tmp (rule-7 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-8 (tokens vars)
    (when (list-eq
    (subseq tokens 0 3)
    (list 'OP_OP 'KW_EXIT 'OP_CP))
        (bye)
    )
    (setf tmp (rule-8 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-9 (tokens vars)
    (when (list-eq
    (subseq tokens 0 1)
    (list 'COMMENT))
        (if (= 1 (list-length tokens))
            (return-from rule-9 (list (list 'PROGRAM) vars))
            (return-from rule-9 (list (append (list 'PROGRAM) (nthcdr 1 tokens)) vars))
        )
    )
    (setf tmp (rule-9 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-10 (tokens vars)
    (when (list-eq
    (subseq tokens 0 1)
    (list 'COMMENT))
        (if (= 2 (list-length tokens))
            (return-from rule-10 (list (list 'PROGRAM) vars))
            (return-from rule-10 (list (append (list 'PROGRAM) (nthcdr 1 tokens)) vars))
        )
    )
    (setf tmp (rule-10 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-11 (tokens vars)
    (when (list-eq
    (subseq tokens 0 2)
    (list 'EXPI))
        (if (= 2 (list-length tokens))
            (return-from rule-11
                (list (list 'VALUES (list (nth 1 tokens)))
                vars))
            (return-from rule-11
                (list (append (list 'VALUES (list (nth 1 tokens))) (nthcdr 2 tokens))
                vars))
        )
    )
    (setf tmp (rule-11 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-12 (tokens vars)
    (when (list-eq
    (subseq tokens 0 4)
    (list 'VALUES 'EXPI))
        (if (= 4 (list-length tokens))
            (return-from rule-12
                (list (list 'VALUES (append (nth 1 tokens) (list (nth 3 tokens))))
                vars))
            (return-from rule-12
                (list (append (list 'VALUES (append (nth 1 tokens) (list (nth 3 tokens)))) (nthcdr 4 tokens))
                vars))
        )
    )
    (setf tmp (rule-12 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-13 (tokens vars)
    (when (list-eq
    (subseq tokens 0 2)
    (list 'VALUE))
        (setf val (nth 1 tokens))
        (if (= 2 (list-length tokens))
            (return-from rule-13 (list (list 'EXPI val) vars))
            (return-from rule-13 (list (append (list 'EXPI val) (nthcdr 2 tokens)) vars))
        )
    )
    (setf tmp (rule-13 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-14 (tokens vars)
    (when (list-eq
    (subseq tokens 0 2)
    (list 'IDENTIFIER))
        (setf val (gethash (nth 1 tokens) vars))
        (if (= 2 (list-length tokens))
            (return-from rule-14 (list (list 'EXPI val) vars))
            (return-from rule-14 (list (append (list 'EXPI val) (nthcdr 2 tokens)) vars))
        )
    )
    (setf tmp (rule-14 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-15 (tokens vars)
    (when (list-eq
    (subseq tokens 0 5)
    (list 'OP_OP 'OP_PLUS 'VALUES 'OP_CP))
        (setf arr (nth 3 tokens))
        (when (> 2 (list-length arr))
            (print "+ operand requires minimum 2 numbers.")
            (bye)
        )
        (setf val (apply '+ arr))
        (if (= 5 (list-length tokens))
            (return-from rule-15 (list (list 'EXPI val) vars))
            (return-from rule-15 (list (append (list 'EXPI val) (nthcdr 5 tokens)) vars))
        )
    )
    (setf tmp (rule-15 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-16 (tokens vars)
    (when (list-eq
    (subseq tokens 0 5)
    (list 'OP_OP 'OP_MINUS 'VALUES 'OP_CP))
        (setf arr (nth 3 tokens))
        (when (> 2 (list-length arr))
            (print "- operand requires minimum 2 numbers.")
            (bye)
        )
        (setf val (apply '- arr))
        (if (= 5 (list-length tokens))
            (return-from rule-16 (list (list 'EXPI val) vars))
            (return-from rule-16 (list (append (list 'EXPI val) (nthcdr 5 tokens)) vars))
        )
    )
    (setf tmp (rule-16 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-17 (tokens vars)
    (when (list-eq
    (subseq tokens 0 5)
    (list 'OP_OP 'OP_DIV 'VALUES 'OP_CP))
        (setf arr (nth 3 tokens))
        (when (/= 2 (list-length arr))
            (print "/ operand requires exactly 2 numbers.")
            (bye)
        )
        (setf val (apply '/ arr))
        (if (= 5 (list-length tokens))
            (return-from rule-17 (list (list 'EXPI val) vars))
            (return-from rule-17 (list (append (list 'EXPI val) (nthcdr 5 tokens)) vars))
        )
    )
    (setf tmp (rule-17 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-18 (tokens vars)
    (when (list-eq
    (subseq tokens 0 5)
    (list 'OP_OP 'OP_MULT 'VALUES 'OP_CP))
        (setf arr (nth 3 tokens))
        (when (> 2 (list-length arr))
            (print "* operand requires minimum 2 numbers.")
            (bye)
        )
        (setf val (apply '* arr))
        (if (= 5 (list-length tokens))
            (return-from rule-18 (list (list 'EXPI val) vars))
            (return-from rule-18 (list (append (list 'EXPI val) (nthcdr 5 tokens)) vars))
        )
    )
    (setf tmp (rule-18 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-19 (tokens vars)
    (when (list-eq
    (subseq tokens 0 5)
    (list 'OP_OP 'OP_DBMULT 'VALUES 'OP_CP))
        (setf arr (nth 3 tokens))
        (when (/= 2 (list-length arr))
            (print "** operand requires exactly 2 numbers.")
            (bye)
        )
        (setf val (expt (car arr) (nth 1 arr)))
        (if (= 5 (list-length tokens))
            (return-from rule-19 (list (list 'EXPI val) vars))
            (return-from rule-19 (list (append (list 'EXPI val) (nthcdr 5 tokens)) vars))
        )
    )
    (setf tmp (rule-19 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-20 (tokens vars)
    (when (list-eq
    (subseq tokens 0 7)
    (list 'OP_OP 'KW_SET 'IDENTIFIER 'VALUES 'OP_CP))
        (setf ids (nth 3 tokens))
        (setf val (car (nth 5 tokens)))
        (setf (gethash ids vars) val)
        (if (= 7 (list-length tokens))
            (return-from rule-20 (list (list 'EXPI val) vars))
            (return-from rule-20 (list (append (list 'EXPI val) (nthcdr 7 tokens)) vars))
        )
    )
    (setf tmp (rule-20 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-21 (tokens vars)
    (when (list-eq
    (subseq tokens 0 7)
    (list 'OP_OP 'KW_IF 'EXPB 'VALUES 'OP_CP))
        (setf cnd (nth 3 tokens))
        (setf vals (nth 5 tokens))
        (when (< 2 (list-length vals))
            (print "IF requires maximum 2 numbers.")
            (bye)
        )
        (setf val (if cnd
            (car vals)
            (if (= 2 (list-length vals)) (nth 1 vals) 0))
        )
        (if (= 7 (list-length tokens))
            (return-from rule-21 (list (list 'EXPI val) vars))
            (return-from rule-21 (list (append (list 'EXPI val) (nthcdr 7 tokens)) vars))
        )
    )
    (setf tmp (rule-21 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-22 (tokens vars)
    (when (list-eq
    (subseq tokens 0 7)
    (list 'OP_OP 'KW_FOR 'EXPB 'VALUES 'OP_CP))
        (setf cnd (nth 3 tokens))
        (setf vals (nth 5 tokens))
        (when (> 2 (list-length vals))
            (print "FOR requires maximum 2 numbers.")
            (bye)
        )
        (setf val (if cnd
            (car vals)
            (if (= 2 (list-length vals)) (nth 1 vals) 0))
        )
        (if (= 7 (list-length tokens))
            (return-from rule-22 (list (list 'EXPI val) vars))
            (return-from rule-22 (list (append (list 'EXPI val) (nthcdr 7 tokens)) vars))
        )
    )
    (setf tmp (rule-22 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-23 (tokens vars)
    (when (list-eq
    (subseq tokens 0 5)
    (list 'OP_OP 'KW_DISP 'VALUES 'OP_CP))
        (setf val (car (nth 3 tokens)))
        (print val)
        (if (= 5 (list-length tokens))
            (return-from rule-23 (list (list 'EXPI val) vars))
            (return-from rule-23 (list (append (list 'EXPI val) (nthcdr 5 tokens)) vars))
        )
    )
    (setf tmp (rule-23 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-24 (tokens vars)
    (when (list-eq
    (subseq tokens 0 1)
    (list 'KW_TRUE))
        (if (= 1 (list-length tokens))
            (return-from rule-24 (list (list 'EXPB T) vars))
            (return-from rule-24 (list (append (list 'EXPB T) (nthcdr 1 tokens)) vars))
        )
    )
    (setf tmp (rule-24 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-25 (tokens vars)
    (when (list-eq
    (subseq tokens 0 1)
    (list 'KW_FALSE))
        (if (= 1 (list-length tokens))
            (return-from rule-25 (list (list 'EXPB NIL) vars))
            (return-from rule-25 (list (append (list 'EXPB NIL) (nthcdr 1 tokens)) vars))
        )
    )
    (setf tmp (rule-25 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-26 (tokens vars)
    (when (list-eq
    (subseq tokens 0 5)
    (list 'OP_OP 'KW_NOT 'EXPB 'OP_CP))
        (setf val (not (nth 3 tokens)))
        (if (= 5 (list-length tokens))
            (return-from rule-26 (list (list 'EXPB val) vars))
            (return-from rule-26 (list (append (list 'EXPB val) (nthcdr 5 tokens)) vars))
        )
    )
    (setf tmp (rule-26 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-27 (tokens vars)
    (when (list-eq
    (subseq tokens 0 7)
    (list 'OP_OP 'KW_OR 'EXPB 'EXPB 'OP_CP))
        (setf val (or (nth 3 tokens) (nth 5 tokens)))
        (if (= 7 (list-length tokens))
            (return-from rule-27 (list (list 'EXPB val) vars))
            (return-from rule-27 (list (append (list 'EXPB val) (nthcdr 7 tokens)) vars))
        )
    )
    (setf tmp (rule-27 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-28 (tokens vars)
    (when (list-eq
    (subseq tokens 0 7)
    (list 'OP_OP 'KW_AND 'EXPB 'EXPB 'OP_CP))
        (setf val (and (nth 3 tokens) (nth 5 tokens)))
        (if (= 7 (list-length tokens))
            (return-from rule-28 (list (list 'EXPB val) vars))
            (return-from rule-28 (list (append (list 'EXPB val) (nthcdr 7 tokens)) vars))
        )
    )
    (setf tmp (rule-28 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-29 (tokens vars)
    (when (list-eq
    (subseq tokens 0 7)
    (list 'OP_OP 'KW_EQUAL 'EXPB 'EXPB 'OP_CP))
        (setf val (equal (nth 3 tokens) (nth 5 tokens)))
        (if (= 7 (list-length tokens))
            (return-from rule-29 (list (list 'EXPB val) vars))
            (return-from rule-29 (list (append (list 'EXPB val) (nthcdr 7 tokens)) vars))
        )
    )
    (setf tmp (rule-29 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-30 (tokens vars)
    (when (list-eq
    (subseq tokens 0 5)
    (list 'OP_OP 'KW_EQUAL 'VALUES 'OP_CP))
        (setf vals (nth 3 tokens))
        (when (/= 2 (list-length vals))
            (print "EQUAL requires exactly 2 numbers.")
            (bye)
        )
        (setf val (equal (nth 0 vals) (nth 1 vals)))
        (if (= 5 (list-length tokens))
            (return-from rule-30 (list (list 'EXPB val) vars))
            (return-from rule-30 (list (append (list 'EXPB val) (nthcdr 5 tokens)) vars))
        )
    )
    (setf tmp (rule-30 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-31 (tokens vars)
    (when (list-eq
    (subseq tokens 0 5)
    (list 'OP_OP 'KW_LESS 'VALUES 'OP_CP))
        (setf vals (nth 3 tokens))
        (when (/= 2 (list-length vals))
            (print "LESS requires exactly 2 numbers.")
            (bye)
        )
        (setf val (< (nth 0 vals) (nth 1 vals)))
        (if (= 5 (list-length tokens))
            (return-from rule-31 (list (list 'EXPB val) vars))
            (return-from rule-31 (list (append (list 'EXPB val) (nthcdr 5 tokens)) vars))
        )
    )
    (setf tmp (rule-31 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-32 (tokens vars)
    (when (list-eq
    (subseq tokens 0 5)
    (list 'OP_OP 'KW_DISP 'EXPB 'OP_CP))
        (setf val (nth 3 tokens))
        (print val)
        (if (= 5 (list-length tokens))
            (return-from rule-32 (list (list 'EXPB val) vars))
            (return-from rule-32 (list (append (list 'EXPB val) (nthcdr 5 tokens)) vars))
        )
    )
    (setf tmp (rule-32 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-33 (tokens vars)
    (when (list-eq
    (subseq tokens 0 5)
    (list 'OP_OP 'KW_LOAD 'STRING 'OP_CP))
        (setf val (str-check (nth 3 tokens)))
        (print "Result:")
        (write val)
        (if (= 5 (list-length tokens))
            (return-from rule-33 (list (list 'EXPB val) vars))
            (return-from rule-33 (list (append (list 'EXPB val) (nthcdr 5 tokens)) vars))
        )
    )
    (setf tmp (rule-33 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-34 (tokens vars)
    (when (list-eq
    (subseq tokens 0 1)
    (list 'KW_NIL))
        (if (= 1 (list-length tokens))
            (return-from rule-34 (list (list 'EXPLI NIL) vars))
            (return-from rule-34 (list (append (list 'EXPLI NIL) (nthcdr 1 tokens)) vars))
        )
    )
    (setf tmp (rule-34 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-35 (tokens vars)
    (when (list-eq
    (subseq tokens 0 3)
    (list 'OP_OP 'KW_LIST 'OP_CP))
        (if (= 3 (list-length tokens))
            (return-from rule-35 (list (list 'EXPLI NIL) vars))
            (return-from rule-35 (list (append (list 'EXPLI NIL) (nthcdr 3 tokens)) vars))
        )
    )
    (setf tmp (rule-35 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-36 (tokens vars)
    (when (list-eq
    (subseq tokens 0 5)
    (list 'OP_OP 'KW_LIST 'VALUES 'OP_CP))
        (setf val (nth 3 tokens))
        (if (= 5 (list-length tokens))
            (return-from rule-36 (list (list 'EXPLI val) vars))
            (return-from rule-36 (list (append (list 'EXPLI val) (nthcdr 5 tokens)) vars))
        )
    )
    (setf tmp (rule-36 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-37 (tokens vars)
    (when (list-eq
    (subseq tokens 0 7)
    (list 'OP_OP 'KW_CONCAT 'EXPLI 'EXPLI 'OP_CP))
        (setf val (append (nth 3 tokens) (nth 5 tokens)))
        (if (= 7 (list-length tokens))
            (return-from rule-37 (list (list 'EXPLI val) vars))
            (return-from rule-37 (list (append (list 'EXPLI val) (nthcdr 7 tokens)) vars))
        )
    )
    (setf tmp (rule-37 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-38 (tokens vars)
    (when (list-eq
    (subseq tokens 0 7)
    (list 'OP_OP 'KW_APPEND 'VALUES 'EXPLI 'OP_CP))
        (setf val (append (nth 3 tokens) (nth 5 tokens)))
        (if (= 7 (list-length tokens))
            (return-from rule-38 (list (list 'EXPLI val) vars))
            (return-from rule-38 (list (append (list 'EXPLI val) (nthcdr 7 tokens)) vars))
        )
    )
    (setf tmp (rule-38 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)

(defun rule-39 (tokens vars)
    (when (list-eq
    (subseq tokens 0 5)
    (list 'OP_OP 'KW_DISP 'EXPLI 'OP_CP))
        (setf val (nth 3 tokens))
        (print val)
        (if (= 5 (list-length tokens))
            (return-from rule-39 (list (list 'EXPLI val) vars))
            (return-from rule-39 (list (append (list 'EXPLI val) (nthcdr 5 tokens)) vars))
        )
    )
    (setf tmp (rule-39 (cdr tokens) vars))
    (setf tokens (append (list (car tokens)) (car tmp)))
    (list tokens vars)
)